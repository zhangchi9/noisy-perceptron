function showresults(cho)
close all
switch(cho)
    %%
    case 'rob'
        % this section show results: for a given pattern, I will include
        % all the error pattern having hamming distance h with the original
        % pattern. for example, for pattern (1,1,1,1,1) and hamming
        % distance h = 2, I will include all pattern like (-1,-1,1,1,1),
        % (-1,1,-1,1,1),(-1,1,1,-1,1) ect...
        % this mat file name is for different N and different h.
        figure
        load N25h1
        plot(prange,rate,'*-')
        hold on
        load N100h1
        plot(prange,rate,'*-')
        load N300h1
        plot(prange,rate,'*-')
        load N400h1
        plot(prange,rate,'*-')
        load N500h1
        plot(prange,rate,'*-')
        load N600h1
        plot(prange,rate,'*-')
        legend('N25','N100','N300','N400','N500','N600')
        xlabel('m/N')
        ylabel('Probablity of success')
        title('Error h = 1')
        set(gca,'FontSize',12)
        
        figure
        load N30h2
        plot(prange,rate,'*-','LineWidth',2)
        hold on
        load N40h2
        plot(prange,rate,'*-','LineWidth',2)
        load N50h2
        plot(prange,rate,'*-','LineWidth',2)
        load N60h2
        plot(prange,rate,'*-','LineWidth',2)
        load N70h2
        plot(prange,rate,'*-','LineWidth',2)
        load N80h2
        plot(prange,rate,'*-','LineWidth',2)
        load N100h2
        plot(prange,rate,'*-','LineWidth',2)
        load N120h2
        plot(prange,rate,'*-','LineWidth',2)
        legend('N30','N40','N50','N60','N70','N80','N100','N120')
        xlabel('m/N')
        ylabel('Probablity of success')
        title('Error h = 2')
        
        figure
        load N20h3
        plot(prange,rate,'*-','LineWidth',2)
        hold on
        load N50h3
        plot(prange,rate,'*-','LineWidth',2)
        load N60h3
        plot(prange,rate,'*-','LineWidth',2)
        load N70h3
        plot(prange,rate,'*-','LineWidth',2)
        load N80h3
        plot(prange,rate,'*-','LineWidth',2)
        load N90h3
        plot(prange,rate,'*-','LineWidth',2)
        legend('N20','N50')
        xlabel('m/N')
        ylabel('Probablity of success')
        title('Error h = 3')
        
        figure
        load N50h4
        plot(prange,rate,'*-')
        hold on
        grid on
        legend('N50')
        xlabel('m/N')
        ylabel('Probablity of success')
        title('Error h = 4')
        
        figure
        c = 4;
        load capacity.mat
        for i = 1:length(N)
            plot(c*i./sqrt(N{i}),capacity{i},'*-','LineWidth',2)
            hold on
        end
        legend('h1','h2','h3','h4')
        xlabel('h')
        ylabel('capacity')
        k = 0:0.01:4;
        a = k/sqrt(2*pi).*exp(-k.^2/2)+(k.^2+1)/2.*(1+erf(k/sqrt(2)));
        a = a.^-1;
        plot(k,a,'LineWidth',2)
        k = 0.4:0.01:4;
        plot(k,2/sqrt(2*pi)./k,'LineWidth',2)
        
        figure
        c = 1;
        load capacity.mat
        for i = 1:length(N)
            plot(i./N{i},capacity{i},'*-')
            hold on
        end
        grid minor
        legend('h1','h2','h3','h4')
        %axis([0,600,0,2])
        xlabel('h/sqrt(N)')
        ylabel('capacity')
        %%
        
    case 'cor'
        % this section results, I only consider two pattern. the two
        % pattern are generated by an error matrix mutiply the original
        % pattern. The error matrix has different configuration, which
        % shows in the picture.
        load 2pattern_asymmetric.mat
        figure,subplot(1,2,1), image(imread('Picture4.jpg'))
        subplot(1,2,2), plot(data(:,4),data(:,3),'o')
        legend('y = 2(1-h/N)')
        axis square
        xlabel('h/N')
        ylabel('Capacity')
        
        load convex_two_pattern_nonoverlap.mat
        figure,subplot(1,2,1), image(imread('Picture1.jpg'))
        subplot(1,2,2), plot(data_convex(:,4),data_convex(:,3),'o')
        legend('y = 2(1-2h/N)')
        axis square
        xlabel('h/N')
        ylabel('Capacity')
        
        load pattern2_overlap.mat
        figure,subplot(1,2,1), image(imread('Picture2.jpg'))
        subplot(1,2,2),plot(data(:,4),data(:,3),'o')
        legend('y = 2(1-2h/N)')
        xlabel('h/N')
        ylabel('Capacity')
        axis square
        
        load 3pattern.mat
        figure,subplot(1,2,1), image(imread('Picture3.jpg'))
        subplot(1,2,2),plot(data(:,4),data(:,3),'o')
        legend('y = 2(1-3h/N)')
        xlabel('h/N')
        ylabel('Capacity')
        axis square
        
        figure
        load 5pattern.mat
        plot(data(:,4),data(:,3),'o')
        title('5 pattern no overlap')
        legend('y = 2(1-5h/N)')
        xlabel('h/N')
        ylabel('Capacity')
        axis square
        
        figure
        load 10pattern.mat
        plot(data(:,4),data(:,3),'o')
        title('5 pattern no overlap')
        legend('y = 2(1-10h/N)')
        xlabel('h/N')
        ylabel('Capacity')
        axis square
        %%
    case 'prob'
        % In this section, I should show results that for a given pattern,
        % I will generate a error pattern where I randomly choose Np
        % synapse to flip their input. These two pattern (orignal pattern
        % and error pattern) have the same label. Then I will consider the
        % capacity of the system. The capacity is defined by the orignal
        % pattern. It also shows the results of changing differnet firing
        % probability and error probability.
        p = 0:0.005:1;
        y = (1/2+2/pi*atan(sqrt(p./(1-p)))).^-1;
        plot(p,y)
        hold on
        load Prob_1error.mat
        hold on
        for i = 100:100:1000
            ind = find(data(:,1)==i);
            plot(data(ind,2),data(ind,3),'*')
        end
        legend('Theoretical1','N=100','N=200','N=300','N=400','N=500','N=600','N=700','N=800','N=900','N=1000')
        xlabel('Misfiring rate p')
        ylabel('Capacity')
        
        figure
        load prob_err_n_err_pattern.mat
        for j = 5:5:50
            ind = find(abs(data(:,3)-j)<0.01);
            plot(data(ind,2),data(ind,4),'*-')
            hold on
        end
        legend('Q=5','Q=10','Q=15','Q=20')
        
        load prob_err_vary_fin_fout.mat
        load Prob_err_theory.mat
        prange = [0.01:0.01:0.04,0.05:0.05:0.95,0.99];
        data2(:,1)=[Theoretical_results{:,1}]';
        data2(:,2)=[Theoretical_results{:,2}]';
        cmap = colormap(jet(10));
        for i = 0.1:0.1:0.9  % iterate fin
            hf=figure ;
            for j = 0.1:0.1:0.9  %iterate fout
                ind = find((abs(data(:,1)-i)<0.01).*(abs(data(:,2)-j)<0.01) == 1);
                temp=data(ind,:);
                [a,b]=sort(temp(:,4));
                temp = temp(b,:);
                subplot(3,3,round(10*j)), plot(temp(:,4),temp(:,5),'*','color',cmap(j*10+1,:))
                hold on
                ind = find((abs(data2(:,1)-i)<0.01).*(abs(data2(:,2)-j)<0.01) == 1);
                A = (prange-(1-2*i)^2*prange.^2)/2;
                B = (1-prange-(1-2*i)^2*(1-prange).^2)/2;
                C = (1-2*i)^2*prange.*(1-prange)/2;
                cor = (1-C.*C./A./B).^(3/2);  % this is the correction that to correct a constant
                % missing in the theoretical calculation.
                plot(prange,Theoretical_results{ind,3}./cor,'-','color',cmap(j*10+1,:))
                hold off
                title(['f_{out}=',num2str(j)])
            end
            pb = uicontrol(hf,'Style','text','String',['fin=',num2str(i)],...
                'Units','normalized','HorizontalAlignment','center','Position',[0.42 0.95 0.3 0.05],'FontSize',12);
        end
        
    case('kandb')
        load kappa_budget.mat
        [X,Y] = meshgrid(kappa_range,budget_range);
        [Xq,Yq] = meshgrid(linspace(min(kappa_range),max(kappa_range),1000),linspace(min(budget_range),max(budget_range),1000));
        capacity_map = interp2(X,Y,capacity_map',Xq,Yq);
        exc_con_map = interp2(X,Y,exc_con_map',Xq,Yq);
        inh_con_map = interp2(X,Y,inh_con_map',Xq,Yq);
        
   
        figure
        imagesc(kappa_range,budget_range,capacity_map)
        hold on
        contour(Xq,Yq,capacity_map,[0.1,0.5,1,2,3],'ShowText','on','color','y')
        set(gca,'YDir','normal')
        colorbar
        title('Capacity')
        
        
        figure
        imagesc(kappa_range,budget_range,exc_con_map)
        hold on
        contour(Xq,Yq,exc_con_map,[0.1,0.2,0.3],'ShowText','on','color','y')
        set(gca,'YDir','normal')
        title('Excitatory Connection')
        colorbar
        
        figure
        imagesc(kappa_range,budget_range,inh_con_map)
        hold on 
        contour(Xq,Yq,inh_con_map,[0.4,0.5,0.6],'ShowText','on','color','y')
        set(gca,'YDir','normal')
        title('Inhibitory Connection')
        colorbar
    otherwise
        fprintf('Invalid Input\n' );
end




